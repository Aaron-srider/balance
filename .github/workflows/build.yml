#Workflow name

name: CI/CD Pipeline

on:
  push:
    branches:
      - dev

jobs:
#  tests:
#    name: Unit tests
#    runs-on: ubuntu-latest
#    #Job's steps
#    steps:
#      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
#      - name: Checkout Repository
#        uses: actions/checkout@v1
#
#      - name: Set up JDK 11
#        uses: actions/setup-java@v1
#        with:
#          java-version: 11
#
#      #Set up Maven cache
#      - name: Cache Maven packages
#        #This action allows caching dependencies and build outputs to improve workflow execution time.
#        uses: actions/cache@v1
#        with:
#          path: ~/.m2
#          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#          restore-keys: ${{ runner.os }}-m2
#
#      - name: Run Tests
#        run: mvn -B test
#
#  sonarcloud:
#    name: sonarcloud analyze
##    needs: tests
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
#      - name: Set up JDK 11
#        uses: actions/setup-java@v3
#        with:
#          java-version: 11
#          distribution: 'zulu' # Alternative distribution options are available.
#      - name: Cache SonarCloud packages
#        uses: actions/cache@v3
#        with:
#          path: ~/.sonar/cache
#          key: ${{ runner.os }}-sonar
#          restore-keys: ${{ runner.os }}-sonar
#      - name: Cache Maven packages
#        uses: actions/cache@v3
#        with:
#          path: ~/.m2
#          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#          restore-keys: ${{ runner.os }}-m2
#      - name: Build and analyze
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=Aaron-srider_ci-experience
  # Build's job


  sonarcloud:
    name: sonarcloud analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'zulu' # Alternative distribution options are available.
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dmaven.test.skip=true -Dsonar.projectKey=Aaron-srider_balance

  build:
    # Depends on sonar's job
#    needs: sonarcloud
    name: Build
    # Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      # build vue
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Install Vue.js dependencies
        run: npm install --force
        working-directory: ui # Path to the Vue.js project directory

      - name: Build Vue.js project
        run: npm run build-production
        working-directory: ui # Path to the Vue.js project directory

      - name: Copy Vue.js build to Java resources
        run: cp -R ui/dist/ src/main/resources/static/


      # build java
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'

      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn -Dmaven.test.skip=true -B  package -DskipTests --file pom.xml

      - name: Upload JAR
        # This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete.
        uses: actions/upload-artifact@v2
        with:
          # Set artifact name
          name: server-artifact
          # From this path
          path: target/server.jar

  build-and-deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v1

      - name: Download JAR artifact
        uses: actions/download-artifact@v2
        with:
          name: server-artifact
          path: target

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest-alpine

      - name: Login to server and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: cd ~ && ./deploy-balance.sh wc123456
